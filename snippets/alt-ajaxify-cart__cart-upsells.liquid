<script>

/**
 * Module to ajaxify all add to cart forms on the page.
 *
 * Copyright (c) 2015 Caroline Schnapp (11heavens.com)
 * Dual licensed under the MIT and GPL licenses:
 * http://www.opensource.org/licenses/mit-license.php
 * http://www.gnu.org/licenses/gpl.html
 *
 */
Shopify.AjaxifyCart = (function($) {
  
  // Some configuration options.
  // I have separated what you will never need to change from what
  // you might change.
  
  var _config = {
    
    // What you might want to change
    addToCartBtnLabel:             'Add',
    addedToCartBtnLabel:           'Yay!',
    addingToCartBtnLabel:          '...',
    soldOutBtnLabel:               'Sold Out',
    howLongTillBtnReturnsToNormal: 1000, // in milliseconds.
    cartCountSelector:             '.cart-count, #cart-count a:first, #gocart p a, #cart .checkout em, .item-count',
    cartTotalSelector:             '#cart-price',
    // 'aboveForm' for top of add to cart form, 
    // 'belowForm' for below the add to cart form, and 
    // 'nextButton' for next to add to cart button.
    feedbackPosition:              'nextButton',
    
    // What you will never need to change
    addToCartBtnSelector:          '[type="submit"]',
    addToCartFormSelector:         'form[action="/cart/add"]',
    shopifyAjaxAddURL:             '/cart/add.js',
    shopifyAjaxCartURL:            '/cart.js'
  };
  
  // We need some feedback when adding an item to the cart.
  // Here it is.  
  var _showFeedback = function(success, html, $addToCartForm) {
    $('.ajaxified-cart-feedback').remove();
    var feedback = '<p class="ajaxified-cart-feedback ' + success + '">' + html + '</p>';
    switch (_config.feedbackPosition) {
      case 'aboveForm':
        $addToCartForm.before(feedback);
        break;
      case 'belowForm':
        $addToCartForm.after(feedback);
        break;
      case 'nextButton':
      default:
        $addToCartForm.find(_config.addToCartBtnSelector).after(feedback);
        break;   
    }
    // If you use animate.css
    // $('.ajaxified-cart-feedback').addClass('animated bounceInDown');
    $('.ajaxified-cart-feedback').slideDown();
  };
  var _setText = function($button, label) {
    if ($button.children().length) {
      $button.children().each(function() {
        if ($.trim($(this).text()) !== '') {
          $(this).text(label);
        }
      });
    }
    else {
      $button.val(label).text(label);
    }
  };
  var _init = function() {
    function format_money(money_ammount) {
      return Shopify.formatMoney(money_ammount, "{{ shop.money_format | remove: "'" | remove: '"' }}")
    }

    function convert_img_to_low_res(url) {
      return url.split('.jpg').join('_200x.jpg')
    }

    let cart_item_template = `
      <tr class="table-row  ">
        <td class="product-item first">
          <div class="image-wrap">
            <a class="image" href="">
              <img src="" alt="">
              <span class="outline"></span>
            </a>
          </div>
          <div class="wrap">
            <span class="label title"><a href="" title=""></a></span>
            <span class="label variant"></span>
            <span class="label vendor"></span>
          </div>
        </td>
        <td class="price">
          <span class="money">
            <span class="saso-cart-item-price" data-key=""></span>
          </span>
        </td>
        <!-- hide quantity for hand sanitizer -->
        <td class="quantity">
          <input type="number" name="updates[]" class="field" value="1" data-id="" id="">
        </td>
        <td class="total">
          <span class="money">
            <span class="saso-cart-item-line-price" data-key=""></span>
          </span>
        </td>
        <td class="remove last"><a href="/cart/change/12598069002324?quantity=0">v</a></td>
      </tr>
    `;    

    function handle_succesful_add_to_cart(line_item_data) {
      let cart_table = $('#cart-form tbody');
      let $line_item = $(cart_item_template);

      $line_item.find('a.image').attr('href', line_item_data.url);
      $line_item.find('img').attr('src', convert_img_to_low_res(line_item_data.image));
      $line_item.find('.label.title a').attr('href', line_item_data.url).text(line_item_data.product_title);
      if (line_item_data.variant_title && line_item_data.variant_title != 'Default Title') {
        let variant_title = line_item_data.variant_title.replace(' / Default', '').replace('Default', '');
        $line_item.find('.label.variant').text(variant_title);
      }

      // Loop trough item properties and add them if necessary
      if ($line_item.properties) {
        let props = line_item.properties.constructor.name == "Object" || {}
        props = Object.entries(props);
        if (props.length) {
          let props_container = $line_item.find('.label.vendor')
          props.forEach((el) => {
            if(el[1] != "" && el[0] != "subscription_id" && el[0] != "shipping_interval_frequency" && el[0] != "shipping_interval_unit_type" ) {
              props_container.append(`<br />${el[0]}: ${el[0]}`);
            }
          });
        }
      }

      $line_item.find('.saso-cart-item-price').attr('data-key', line_item_data.key).text(format_money(line_item_data.final_price));
      $line_item.find('.quantity [name=updates\\[\\]]').val(line_item_data.quantity).attr('data-id', line_item_data.variant_id).attr('id', `updates_${line_item_data.variant_id}`);
      $line_item.find('.saso-cart-item-line-price').attr('data-key', line_item_data.key).text(format_money(line_item_data.final_line_price));
      $line_item.find('.remove.last a').attr('href', `/cart/change/${line_item_data.variant_id}?quantity=0`)


      // Check if variant is already in the cart
      let variant_in_cart = $(`#cart-form .table-row .quantity input[data-id=${line_item_data.variant_id}]`).parents('.table-row');
      if (variant_in_cart.length) {
        variant_in_cart.remove();
      }
      cart_table.prepend($line_item);

      // Update cart totals and cart count
      let cart_total_container = $('#cart-form .saso-cart-original-total');
      let new_cart_ammount = Number(cart_total_container.attr('data-cart-total-price')) + line_item_data.final_price;
      cart_total_container.text(format_money(new_cart_ammount)).attr('data-cart-total-price', new_cart_ammount);
      let cart_count_container = $('#main-header .cart-count');
      cart_count_container.text(Number(cart_count_container.text()) + 1);
      // Make a call to cart.js to make sure cart totals are correct
      fetch('/cart.json').then((data) => {
        data.json().then((data) => {
          cart_total_container.text(format_money(data.total_price)).attr('data-cart-total-price', data.total_price);
          cart_count_container.text(data.item_count);
        })
      }).catch((er) => {
        console.log('Error while fetching cart');
        console.log(er);
      });
    }

    $(document).ready(function() { 
      $(_config.addToCartFormSelector).submit(function(e) {
        e.preventDefault();
        var $addToCartForm = $(this);
        var $addToCartBtn = $addToCartForm.find(_config.addToCartBtnSelector);
        _setText($addToCartBtn, _config.addingToCartBtnLabel);
        $addToCartBtn.addClass('disabled').prop('disabled', true);
        // Add to cart.
        $.ajax({
          url: _config.shopifyAjaxAddURL,
          dataType: 'json',
          type: 'post',
          data: $addToCartForm.serialize(),
          success: function(itemData) {
          	console.log('added to cart succesfully');
            handle_succesful_add_to_cart(itemData);
            $addToCartBtn.addClass('inverted');
            _setText($addToCartBtn, _config.addedToCartBtnLabel)
            let upsell_item = $(e.target.closest('li'));
            upsell_item.on('transitionend', () => {
              upsell_item.remove();
              // Show additional upsell product if it exists
              $('.free-ship-calc-message.cart-upsells li.product.hide').first().removeClass('hide');

              // Check if there are more upsells left, remove container if not
              let upsells = $('.free-ship-calc-message.cart-upsells ul.product-list li.product');
              if (!upsells.length) {
                $('.free-ship-calc-message.cart-upsells').remove();
              }

              // Update upsell (free shipping) heading depending on the new cart ammount
              let new_cart_ammount = $('#cart-form .saso-cart-original-total').attr('data-cart-total-price');
              let free_shipping_treshold = 7500
              if (new_cart_ammount >= free_shipping_treshold) {
                let heading_h3 = $('.free-ship-calc-message.cart-upsells > h3');
                if (!heading_h3.hasClass('reached')) {
                  heading_h3.text("A few faves we think you'll love:").css('margin-bottom', '30px').addClass('reached');
                  $('.free-ship-calc-message.cart-upsells > p').remove();
                }
              } else {
                let money_free_shipping_away = free_shipping_treshold - new_cart_ammount;
                $('.free-ship-calc-message.cart-upsells .money-ammount-away').text(format_money(money_free_shipping_away));
              }              
            });
            setTimeout(() => {
              upsell_item.css({
                "-webkit-transform":"translateY(-50%)",
                "-ms-transform":"translateY(-50%)",
                "transform":"translateY(-50%)",
                "opacity": "0"
              });
            }, 600);

            //// Re-enable add to cart button.
            //$addToCartBtn.addClass('inverted');
            //_setText($addToCartBtn, _config.addedToCartBtnLabel);
            ////_showFeedback('success','Added to your <a href="/cart">cart</a>! Feel free to <a href="/cart">checkout</a> or <a href="/collections/primally-pure">continue shopping</a>.',$addToCartForm);
            //window.setTimeout(function(){
            //  $addToCartBtn.prop('disabled', false).removeClass('disabled').removeClass('inverted');
            //  _setText($addToCartBtn,_config.addToCartBtnLabel);
            //}, _config.howLongTillBtnReturnsToNormal);
            //// Update cart count and show cart link.
            //$.getJSON(_config.shopifyAjaxCartURL, function(cart) {
            //  if (_config.cartCountSelector && $(_config.cartCountSelector).length) {
            //    var value = $(_config.cartCountSelector).html() || '0';
            //    $(_config.cartCountSelector).html(value.replace(/[0-9]+/,cart.item_count)).removeClass('hidden-count');
            //  }
            //  if (_config.cartTotalSelector && $(_config.cartTotalSelector).length) {
            //    if (typeof Currency !== 'undefined' && typeof Currency.moneyFormats !== 'undefined') {
            //      var newCurrency = '';
            //      if ($('[name="currencies"]').length) {
            //        newCurrency = $('[name="currencies"]').val();
            //      }
            //      else if ($('#currencies span.selected').length) {
            //        newCurrency = $('#currencies span.selected').attr('data-currency');
            //      }
            //      if (newCurrency) {
            //        $(_config.cartTotalSelector).html('<span class=money>' + Shopify.formatMoney(Currency.convert(cart.total_price, "{{ shop.currency }}", newCurrency), Currency.money_format[newCurrency]) + '</span>');
            //      } 
            //      else {
            //        $(_config.cartTotalSelector).html(Shopify.formatMoney(cart.total_price, "{{ shop.money_format | remove: "'" | remove: '"' }}"));
            //      }
            //    }
            //    else {
            //      $(_config.cartTotalSelector).html(Shopify.formatMoney(cart.total_price, "{{ shop.money_format | remove: "'" | remove: '"' }}"));
            //    }
            //  };
            //});        
          }, 
          error: function(XMLHttpRequest) {
            console.log('got error');
            console.log(XMLHttpRequest);
            var response = eval('(' + XMLHttpRequest.responseText + ')');
            response = response.description;
            if (response.slice(0,4) === 'All ') {
              _showFeedback('error', response.replace('All 1 ', 'All '), $addToCartForm);
              $addToCartBtn.prop('disabled', false);
              _setText($addToCartBtn, _config.soldOutBtnLabel);
              $addToCartBtn.prop('disabled',true);
            }
            else {
              _showFeedback('error', '<i class="fa fa-warning"></i> ' + response, $addToCartForm);
              $addToCartBtn.prop('disabled', false).removeClass('disabled');
              _setText($addToCartBtn, _config.addToCartBtnLabel);
            }
          }
        });   
        return false;    
      });
    });
  };
  return {
    init: function(params) {
        // Configuration
        params = params || {};
        // Merging with defaults.
        $.extend(_config, params);
        // Action
        $(function() {
          _init();
        });
    },    
    getConfig: function() {
      return _config;
    }
  }  
})(jQuery);

Shopify.AjaxifyCart.init();

</script>

{% comment %}
  If you want to animate your feedback message.
{% endcomment %}

{% comment %}
{{ '//cdnjs.cloudflare.com/ajax/libs/animate.css/3.1.0/animate.min.css' | stylesheet_tag }}
{% endcomment %}

{{ '//cdnjs.cloudflare.com/ajax/libs/font-awesome/4.0.3/css/font-awesome.css' | stylesheet_tag }}

